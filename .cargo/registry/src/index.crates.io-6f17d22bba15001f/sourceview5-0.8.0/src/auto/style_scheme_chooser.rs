// This file was generated by gir (https://github.com/gtk-rs/gir)
// from
// from gir-files (https://github.com/gtk-rs/gir-files.git)
// DO NOT EDIT

use crate::StyleScheme;
use glib::{
    prelude::*,
    signal::{connect_raw, SignalHandlerId},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "GtkSourceStyleSchemeChooser")]
    pub struct StyleSchemeChooser(Interface<ffi::GtkSourceStyleSchemeChooser, ffi::GtkSourceStyleSchemeChooserInterface>);

    match fn {
        type_ => || ffi::gtk_source_style_scheme_chooser_get_type(),
    }
}

impl StyleSchemeChooser {
    pub const NONE: Option<&'static StyleSchemeChooser> = None;
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::StyleSchemeChooser>> Sealed for T {}
}

pub trait StyleSchemeChooserExt: IsA<StyleSchemeChooser> + sealed::Sealed + 'static {
    #[doc(alias = "gtk_source_style_scheme_chooser_get_style_scheme")]
    #[doc(alias = "get_style_scheme")]
    fn style_scheme(&self) -> StyleScheme {
        unsafe {
            from_glib_none(ffi::gtk_source_style_scheme_chooser_get_style_scheme(
                self.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "gtk_source_style_scheme_chooser_set_style_scheme")]
    fn set_style_scheme(&self, scheme: &StyleScheme) {
        unsafe {
            ffi::gtk_source_style_scheme_chooser_set_style_scheme(
                self.as_ref().to_glib_none().0,
                scheme.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "style-scheme")]
    fn connect_style_scheme_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_style_scheme_trampoline<
            P: IsA<StyleSchemeChooser>,
            F: Fn(&P) + 'static,
        >(
            this: *mut ffi::GtkSourceStyleSchemeChooser,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            let f: &F = &*(f as *const F);
            f(StyleSchemeChooser::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                b"notify::style-scheme\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(
                    notify_style_scheme_trampoline::<Self, F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}

impl<O: IsA<StyleSchemeChooser>> StyleSchemeChooserExt for O {}
